makeVector(5)
m
makeCacheMatrix <- function(x = matrix()) {
## @x: a square invertible matrix
## return: a list containing functions to
##              1. set the matrix
##              2. get the matrix
##              3. set the inverse
##              4. get the inverse
##         this list is used as the input to cacheSolve()
inv = NULL
set = function(y) {
# use `<<-` to assign a value to an object in an environment
# different from the current environment.
x <<- y
inv <<- NULL
}
get = function() x
setinv = function(inverse) inv <<- inverse
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}
cacheSolve <- function(x, ...) {
## @x: output of makeCacheMatrix()
## return: inverse of the original matrix input to makeCacheMatrix()
inv = x$getinv()
# if the inverse has already been calculated
if (!is.null(inv)){
# get it from the cache and skips the computation.
message("getting cached data")
return(inv)
}
# otherwise, calculates the inverse
mat.data = x$get()
inv = solve(mat.data, ...)
# sets the value of the inverse in the cache via the setinv function.
x$setinv(inv)
return(inv)
}
test = function(mat){
## @mat: an invertible matrix
temp = makeCacheMatrix(mat)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
start.time = Sys.time()
cacheSolve(temp)
dur = Sys.time() - start.time
print(dur)
}
set.seed(1110201)
r = rnorm(1000000)
mat1 = matrix(r, nrow=1000, ncol=1000)
test(mat1)
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
par(mar = c(0, 0, 0, 0))
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
par(mar = rep(0.2, 4))
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris, 3))
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
newiris <- iris
(kc <- kmeans(newiris, 3))
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris, 3))
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
(kc <- kmeans(newiris, 5))
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris, 5))
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:3, pch=8, cex=2)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:5, pch=8, cex=2)
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris, 5))
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:5, pch=8, cex=2)
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris, 5))
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:5, pch=8, cex=2)
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris, 5))
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:5, pch=8, cex=2)
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris, 5))
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:5, pch=8, cex=2)
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris, 5))
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:5, pch=8, cex=2)
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris, 5))
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:5, pch=8, cex=2)
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris, 5))
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:5, pch=8, cex=2)
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris, 5))
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:5, pch=8, cex=2)
newiris <- iris
newiris$Species <- NULL
(kc <- kmeans(newiris, 5))
table(iris$Species, kc$cluster)
plot(newiris[c("Sepal.Length", "Sepal.Width")], col=kc$cluster)
points(kc$centers[,c("Sepal.Length", "Sepal.Width")], col=1:5, pch=8, cex=2)
install.packages("caret")
library(data.table)
install.packages("data.table")
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
setwd("~/Documents/R/MachLearn")
D <- fread(url)
install.packages("curl")
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DTest <- fread(url)
View(D)
isAnyMissing <- sapply(DTest, function (x) any(is.na(x) | x == ""))
isPredictor <- !isAnyMissing & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(isAnyMissing))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
isAnyMissing <- sapply(DTest, function (x) any(is.na(x) | x == ""))
isAnyMissing
grepl("belt|[^(fore)]arm|dumbbell|forearm", names(isAnyMissing))
View(DTest)
isAnyMissing <- sapply(DTest, function (x) any(is.na(x) | x == ""))
isPredictor <- !isAnyMissing & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(isAnyMissing))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
varToInclude <- c("classe", predCandidates)
D <- D[, varToInclude, with=FALSE]
dim(D)
View(D)
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DTest <- fread(url)
isAnyMissing <- sapply(DTest, function (x) any(is.na(x) | x == ""))
isPredictor <- !isAnyMissing & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(isAnyMissing))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
D$classe=""
View(D)
D$classe="0"
View(D)
varToInclude <- c("classe", predCandidates)
D <- D[, varToInclude, with=FALSE]
dim(D)
names(D)
D <- D[, classe := factor(D[, classe])]
D[, .N, classe]
View(D)
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DTest <- fread(url)
isAnyMissing <- sapply(DTest, function (x) any(is.na(x) | x == ""))
isPredictor <- !isAnyMissing & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(isAnyMissing))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
varToInclude <- c("classe", predCandidates)
D <- D[, varToInclude, with=FALSE]
dim(D)
names(D)
D <- D[, classe := factor(D[, classe])]
D[, .N, classe]
View(D)
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
D <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DTest <- fread(url)
isAnyMissing <- sapply(DTest, function (x) any(is.na(x) | x == ""))
isPredictor <- !isAnyMissing
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
varToInclude <- c("classe", predCandidates)
D <- D[, varToInclude, with=FALSE]
dim(D)
names(D)
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
DataPack <- fread(url)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
DTest <- fread(url)
isAnyMissing <- sapply(DTest, function (x) any(is.na(x) | x == ""))
isPredictor <- !isAnyMissing & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(isAnyMissing))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
varToInclude <- c("classe", predCandidates)
D <- DataPack[, varToInclude, with=FALSE]
dim(D)
names(D)
View(D)
library(caret)
install.packages("lattice")
install.packages("ggplot2")
\
library(caret)
library(lattice)
library(ggplot2)
library(caret)
seed <- as.numeric(as.Date("2014-10-26"))
set.seed(seed)
inTrain <- createDataPartition(D$classe, p=0.6)
inTrain
inTrain <- createDataPartition(D$classe, p=0.6)
DTrain <- D[inTrain[[1]]]
DProbe <- D[-inTrain[[1]]]
seed <- as.numeric(as.Date("2014-10-26"))
set.seed(seed)
inTrain <- createDataPartition(D$classe, p=0.6)
DTrain <- D[inTrain[[1]]]
DProbe <- D[-inTrain[[1]]]
isAnyMissing <- sapply(DTest, function (x) any(is.na(x) | x == ""))
isPredictor <- !isAnyMissing & grepl("belt|[^(fore)]arm|dumbbell|forearm", names(isAnyMissing))
predCandidates <- names(isAnyMissing)[isPredictor]
predCandidates
varToInclude <- c("classe", predCandidates)
D <- DataPack[, varToInclude, with=FALSE]
dim(D)
names(D)
D <- D[, classe := factor(D[, classe])]
D[, .N, classe]
library(lattice)
library(ggplot2)
library(caret)
seed <- as.numeric(as.Date("2014-10-26"))
set.seed(seed)
inTrain <- createDataPartition(D$classe, p=0.6)
DTrain <- D[inTrain[[1]]]
DProbe <- D[-inTrain[[1]]]
inTrain <- createDataPartition(D$classe, p=0.6)
DTrain <- D[inTrain,]
DProbe <- D[-inTrain,]
inTrain <- createDataPartition(D$classe, p=0.6,list=FALSE)
DTrain <- D[inTrain,]
DProbe <- D[-inTrain,]
X <- DTrain[, predCandidates, with=FALSE]
X <- DTrain[, predCandidates, with=FALSE]
XCS <- predict(preProc, X)
DTrainCS <- data.table(data.frame(classe = DTrain[, classe], XCS))
library(data.table)
X <- DTrain[, predCandidates, with=FALSE]
XCS <- predict(preProc, X)
DTrainCS <- data.table(data.frame(classe = DTrain[, classe], XCS))
X <- DTrain[, predCandidates, with=FALSE]
preProc <- preProcess(X)
preProc
XCS <- predict(preProc, X)
DTrainCS <- data.table(data.frame(classe = DTrain[, classe], XCS))
preProc
View(X)
View(DTrain)
describe(X)
summary(X)
sum(X$magnet_forearm_x)
sum(DTrain$magnet_forearm_x)
View(DTest)
View(DataPack)
library(data.table)
setInternet2(TRUE)
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
DataPack <- fread(url)
DataPack$classe
View(DataPack)
View(DataPack)
library(randomForest)
install.packages("randomForest")
if (!file.exists("./data/pml-testing.csv")){
training = data[inTrain,]
library(caret)
library(randomForest)
if (!file.exists("./data/pml-testing.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./data/pml-testing.csv")
}
data = read.csv("./data/pml-training.csv", na.strings = c("NA", ""))
dim(data)
summary(data$classe)
set.seed(0)
inTrain = createDataPartition(y=data$classe, p=0.7, list=FALSE)
training = data[inTrain,]
testing = data[-inTrain,]
dim(training)
na_test = sapply(training, function(x) {sum(is.na(x))})
table(na_test)
bad_columns = names(na_test[na_test==13460])
training = training[, !names(training) %in% bad_columns]
str(training)
training = training[,-c(1:7)]
model = train(classe~., method="rf", data=train1)
saveRDS(model, "rfmodel.RDS")
library(caret)
library(randomForest)
if (!file.exists("./data/pml-testing.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./data/pml-testing.csv")
}
library(caret)
library(randomForest)
library(curl)
if (!file.exists("./data/pml-testing.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./data/pml-testing.csv")
}
library(caret)
library(randomForest)
library(curl)
if (!file.exists("./data/pml-testing.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./data/pml-testing.csv", method="curl")
}
data = read.csv("./data/pml-training.csv", na.strings = c("NA", ""))
dim(data)
summary(data$classe)
data = read.csv("./data/pml-training.csv", na.strings = c("NA", ""))
if (!file.exists("./data/pml-testing.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"./data/pml-testing.csv", method="curl")
}
if (!file.exists("./data/pml-training.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./data/pml-training.csv", method="curl")
}
library(caret)
library(randomForest)
library(curl)
if (!file.exists("./data/pml-testing.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv",
"./data/pml-testing.csv", method="curl")
}
if (!file.exists("./data/pml-training.csv")){
download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv",
"./data/pml-training.csv", method="curl")
}
data = read.csv("./data/pml-training.csv", na.strings = c("NA", ""))
dim(data)
summary(data$classe)
set.seed(0)
inTrain = createDataPartition(y=data$classe, p=0.7, list=FALSE)
training = data[inTrain,]
testing = data[-inTrain,]
dim(training)
na_test = sapply(training, function(x) {sum(is.na(x))})
table(na_test)
bad_columns = names(na_test[na_test==13460])
training = training[, !names(training) %in% bad_columns]
str(training)
training = training[,-c(1:7)]
model = train(classe~., method="rf", data=train1)
model = train(classe~., method="rf", data=training)
saveRDS(model, "rfmodel.RDS")
model = train(classe~., method="rf", data=training)
install.packages('e1071', dependencies=TRUE)
model = train(classe~., method="rf", data=training)
trainingRaw <- read.csv(file=".data/pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
testingRaw <- read.csv(file=".data/pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
trainingRaw <- read.csv(file="data/pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
testingRaw <- read.csv(file="data/pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
trainingRaw$classe <- as.factor(trainingRaw$classe)
trainingRaw$classe <- as.factor(trainingRaw$classe)
NAindex <- apply(trainingRaw,2,function(x) {sum(is.na(x))})
trainingRaw <- trainingRaw[,which(NAindex == 0)]
NAindex <- apply(testingRaw,2,function(x) {sum(is.na(x))})
testingRaw <- testingRaw[,which(NAindex == 0)]
v <- which(lapply(trainingRaw, class) %in% "numeric")
preObj <-preProcess(trainingRaw[,v],method=c('knnImpute', 'center', 'scale'))
trainLess1 <- predict(preObj, trainingRaw[,v])
trainLess1$classe <- trainingRaw$classe
testLess1 <-predict(preObj,testingRaw[,v])
set.seed(12031987)
inTrain = createDataPartition(trainLess1$classe, p = 3/4, list=FALSE)
training = trainLess1[inTrain,]
crossValidation = trainLess1[-inTrain,]
modFit <- train(classe ~., method="rf", data=train, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
modFit <- train(classe ~., method="rf", data=train, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
modFit <- train(classe ~., method="rf", data=training, trControl=trainControl(method='cv'), number=5, allowParallel=TRUE )
View(testLess1)
View(trainLess1)
modFit
trainingPred <- predict(modFit, training)
confusionMatrix(trainingPred, training$classe)
cvPred <- predict(modFit, crossValidation)
confusionMatrix(cvPred, crossValidation$classe)
testingPred <- predict(modFit, testLess1)
testingPred
cvPred
library(caret)
trainingOriginal <- read.csv(file="data/pml-training.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
testingOriginal <- read.csv(file="data/pml-testing.csv", header=TRUE, as.is = TRUE, stringsAsFactors = FALSE, sep=',', na.strings=c('NA','','#DIV/0!'))
trainingOriginal$classe <- as.factor(trainingOriginal$classe)
NAindex <- apply(trainingOriginal,2,function(x) {sum(is.na(x))})
trainingOriginal <- trainingOriginal[,which(NAindex == 0)]
NAindex <- apply(testingOriginal,2,function(x) {sum(is.na(x))})
testingOriginal <- testingOriginal[,which(NAindex == 0)]
v <- which(lapply(trainingOriginal, class) %in% "numeric")
preObj <-preProcess(trainingOriginal[,v],method=c('knnImpute', 'center', 'scale'))
preProcessedTraining <- predict(preObj, trainingOriginal[,v])
preProcessedTraining$classe <- trainingOriginal$classe
preProcessedTesting <-predict(preObj,testingOriginal[,v])
set.seed(42)
inTrain = createDataPartition(preProcessedTraining$classe, p = 0.6, list=FALSE)
training = preProcessedTraining[inTrain,]
testing = preProcessedTraining[-inTrain,]
model <- train(classe ~., method="rf", data=training, trControl=trainControl(method='cv'), number=7, allowParallel=TRUE )
saveRDS(model , "rfmodel.RDS")
1+1
trainingPred <- predict(modFit, training)
confusionMatrix(trainingPred, training$classe)
testingPred <- predict(model, testing)
confusionMatrix(testingPred, testing$classe)
testingPred <- predict(model, preProcessedTesting)
testingPred
result <- cbind(trainingOriginal, testingPred)
result <- rbind(trainingOriginal, testingPred)
result <- cbind(trainingOriginal, testingPred)
result=0
result <- cbind(trainingOriginal, testingPred)
result <- cbind(testingOriginal, testingPred)
View(result)
```{r}
} else {
View(training)
setwd("~/Documents/R/MachLearn/CourseraMachineLearning")
pml_write_files(answers)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("answers/problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(answers)
pml_write_files(trainingOriginal)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("answers/problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(testingPred)
for(i in 1:n){
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("answers/problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(testingPred)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("answers/problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(testingPred)
